Home Assignment Day 6;

problem 5:
Write C programs for using pass by reference (pointers) for following;
1. Bubble sort
2. Selection sort
3. Insertion sort
4. Linear Search
5. Binary Search using interation (loop), take unsorted array and sort its using any one of the sorting algorithm
Sample skeleton of all sorting
int main()
{
  int a[] = {23, 34, 45};
  BubbleSort(a);
  Print sorted array in main() function
  retrurn 0; 
}
void BubbleSort(int x[])
{
   // He will do the bubble sort
   // Swap
   Swap(&a, &b);
   // Change do in the function should be reflected back in the calling functino
}
// Write a function to swap() two given numbers using pass by reference (pointers)
void Swap(int *x, int *y)
{
     temp = *x;
	 *x = *y;
	 *y = temp;
}
has context menu

1.Bubble sort code:

#include <stdio.h>

void BubbleSort(int arr[], int n);
void Swap(int *x, int *y);

int main() {
    int a[] = {23, 34, 45, 12, 67, 5};
    int n = sizeof(a) / sizeof(a[0]);

    BubbleSort(a, n);

    printf("Sorted array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }
    printf("\n");

    return 0;
}

void BubbleSort(int arr[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] > arr[j+1]) {
                Swap(&arr[j], &arr[j+1]);
            }
        }
    }
}

void Swap(int *x, int *y) {
    int temp = *x;
    *x = *y;
    *y = temp;
}

Bubble sort output:

Sorted array: 5 12 23 34 45 67 


** Process exited - Return Code: 0 **

2.selection sort code:

#include <stdio.h>

void SelectionSort(int arr[], int n);
void Swap(int *x, int *y);

int main() {
    int a[] = {64, 25, 12, 22, 11};
    int n = sizeof(a) / sizeof(a[0]);

    SelectionSort(a, n);

    printf("Sorted array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }
    printf("\n");

    return 0;
}

void SelectionSort(int arr[], int n) {
    int i, j, min_idx;

    for (i = 0; i < n-1; i++) {
        min_idx = i;
        for (j = i+1; j < n; j++) {
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
        }
        Swap(&arr[min_idx], &arr[i]);
    }
}

void Swap(int *x, int *y) {
    int temp = *x;
    *x = *y;
    *y = temp;
}


2.selection sort output:

Sorted array: 11 12 22 25 64 


** Process exited - Return Code: 0 **

3.Insertion sort code:

#include <stdio.h>

void InsertionSort(int arr[], int n);

int main() {
    int a[] = {12, 11, 13, 5, 6};
    int n = sizeof(a) / sizeof(a[0]);

    InsertionSort(a, n);

    printf("Sorted array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }
    printf("\n");

    return 0;
}

void InsertionSort(int arr[], int n) {
    int i, key, j;
    for (i = 1; i < n; i++) {
        key = arr[i];
        j = i - 1;

        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

insertion sort output:

Sorted array: 5 6 11 12 13 


** Process exited - Return Code: 0 **

4.Linear search code:

#include <stdio.h>

int LinearSearch(int arr[], int n, int key);

int main() {
    int a[] = {12, 45, 23, 78, 11, 34};
    int n = sizeof(a) / sizeof(a[0]);
    int key = 11;

    int index = LinearSearch(a, n, key);

    if (index != -1) {
        printf("Element found at index %d\n", index);
    } else {
        printf("Element not found\n");
    }

    return 0;
}

int LinearSearch(int arr[], int n, int key) {
    for (int i = 0; i < n; i++) {
        if (arr[i] == key) {
            return i;
        }
    }
    return -1;
}
 
linear search output:

Element found at index 4


** Process exited - Return Code: 0 **

5.Binary search code:

#include <stdio.h>

int BinarySearch(int arr[], int l, int r, int key);

int main() {
    int a[] = {2, 3, 4, 10, 40};
    int n = sizeof(a) / sizeof(a[0]);
    int key = 10;

    int index = BinarySearch(a, 0, n - 1, key);

    if (index != -1) {
        printf("Element found at index %d\n", index);
    } else {
        printf("Element not found\n");
    }

    return 0;
}

int BinarySearch(int arr[], int l, int r, int key) {
    while (l <= r) {
        int mid = l + (r - l) / 2;

        if (arr[mid] == key) {
            return mid;
        } else if (arr[mid] < key) {
            l = mid + 1;
        } else {
            r = mid - 1;
        }
    }

    return -1;
}

Binary Search output:

Element found at index 3


** Process exited - Return Code: 0 **
